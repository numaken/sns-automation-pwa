import React, { useState, useEffect } from 'react';
import { Settings, Send, Sparkles, Key, AlertCircle } from 'lucide-react';
import PostGenerator from './components/PostGenerator';
import SettingsPanel from './components/SettingsPanel';
import './App.css';

// ライセンス認証コンポーネント
const LicenseAuth = ({ onAuthSuccess }) => {
  const [licenseKey, setLicenseKey] = useState('');
  const [isValidating, setIsValidating] = useState(false);
  const [error, setError] = useState('');

  // 有効なライセンスキー（販売時に生成・配布）
  const validLicenseKeys = [
    'SNS-ENTRY-2024-DEMO01',
    'SNS-ENTRY-2024-DEMO02', 
    'SNS-ENTRY-2024-DEMO03',
    // 実際の販売時はランダム生成したキーを追加
  ];

  const validateLicense = async () => {
    if (!licenseKey.trim()) {
      setError('ライセンスキーを入力してください');
      return;
    }

    setIsValidating(true);
    setError('');

    await new Promise(resolve => setTimeout(resolve, 1500));

    if (validLicenseKeys.includes(licenseKey.trim())) {
      localStorage.setItem('sns_automation_license', licenseKey.trim());
      localStorage.setItem('sns_automation_license_time', Date.now().toString());
      onAuthSuccess();
    } else {
      setError('無効なライセンスキーです。購入時に送付されたキーを確認してください。');
    }

    setIsValidating(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-xl shadow-lg p-6 w-full max-w-md">
        <div className="text-center mb-6">
          <Sparkles className="h-12 w-12 text-blue-600 mx-auto mb-3" />
          <h1 className="text-2xl font-bold text-gray-900 mb-2">SNS自動化システム Entry</h1>
          <p className="text-gray-600">ライセンス認証が必要です</p>
        </div>

        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ライセンスキー
            </label>
            <div className="relative">
              <input
                type="text"
                value={licenseKey}
                onChange={(e) => setLicenseKey(e.target.value.toUpperCase())}
                placeholder="SNS-ENTRY-2024-XXXXXX"
                className="w-full p-3 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
              <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            </div>
          </div>

          {error && (
            <div className="flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-lg">
              <AlertCircle className="h-4 w-4 text-red-600" />
              <p className="text-red-800 text-sm">{error}</p>
            </div>
          )}

          <button
            onClick={validateLicense}
            disabled={isValidating}
            className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 transition-colors"
          >
            {isValidating ? '認証中...' : 'ライセンス認証'}
          </button>
        </div>

        <div className="mt-6 space-y-4">
          <div className="text-center">
            <p className="text-sm text-gray-600 mb-2">
              ライセンスキーをお持ちでない場合
            </p>
            
              href="https://brain-market.com/"
              target="_blank"
              rel="noopener noreferrer"
              className="inline-block bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-green-700 transition-colors"
            >
              今すぐ購入（¥1,480）
            </a>
          </div>

          <div className="bg-blue-50 rounded-lg p-3">
            <h3 className="text-sm font-medium text-blue-900 mb-2">🔐 認証について</h3>
            <ul className="text-xs text-blue-800 space-y-1">
              <li>• 購入後にメールで送付されるライセンスキーを入力</li>
              <li>• 認証後30日間利用可能</li>
              <li>• 1ライセンス = 1デバイス</li>
            </ul>
          </div>

          <div className="bg-yellow-50 rounded-lg p-3">
            <h3 className="text-sm font-medium text-yellow-900 mb-2">🎁 デモキー</h3>
            <p className="text-xs text-yellow-800 mb-2">お試し用（24時間限定）:</p>
            <code className="text-xs bg-yellow-100 px-2 py-1 rounded">SNS-ENTRY-2024-DEMO01</code>
          </div>
        </div>
      </div>
    </div>
  );
};

// メインアプリ
function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isCheckingAuth, setIsCheckingAuth] = useState(true);
  const [activeTab, setActiveTab] = useState('generate');
  const [settings, setSettings] = useState({
    openaiKey: '',
    twitterTokens: null,
    audience: '副業ブロガー',
    style: '親しみやすい',
    topic: '副業と本業の時間管理'
  });

  useEffect(() => {
    const savedSettings = localStorage.getItem('sns_automation_settings');
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings));
    }
  }, []);

  useEffect(() => {
    const checkAuth = () => {
      const license = localStorage.getItem('sns_automation_license');
      const licenseTime = localStorage.getItem('sns_automation_license_time');
      
      if (license && licenseTime) {
        const hoursElapsed = (Date.now() - parseInt(licenseTime)) / (1000 * 60 * 60);
        if (hoursElapsed < 24 * 30) { // 30日間有効
          setIsAuthenticated(true);
        } else {
          localStorage.removeItem('sns_automation_license');
          localStorage.removeItem('sns_automation_license_time');
        }
      }
      setIsCheckingAuth(false);
    };

    checkAuth();
  }, []);

  const saveSettings = (newSettings) => {
    setSettings(newSettings);
    localStorage.setItem('sns_automation_settings', JSON.stringify(newSettings));
  };

  const updateSettings = (newSettings) => {
    setSettings(newSettings);
    localStorage.setItem('sns_automation_settings', JSON.stringify(newSettings));
  };

  if (isCheckingAuth) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2"></div>
          <p className="text-gray-600">認証確認中...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return <LicenseAuth onAuthSuccess={() => setIsAuthenticated(true)} />;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-md mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Sparkles className="h-6 w-6 text-blue-600" />
            <h1 className="text-lg font-bold text-gray-900">SNS自動化</h1>
          </div>
          <button
            onClick={() => setActiveTab(activeTab === 'settings' ? 'generate' : 'settings')}
            className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
          >
            <Settings className="h-5 w-5 text-gray-600" />
          </button>
        </div>
      </header>

      <main className="max-w-md mx-auto p-4 pb-20">
        {activeTab === 'generate' ? (
          <PostGenerator settings={settings} onUpdateSettings={updateSettings} />
        ) : (
          <SettingsPanel settings={settings} onSave={saveSettings} />
        )}
      </main>

      <nav className="fixed bottom-0 left-0 right-0 bg-white border-t">
        <div className="max-w-md mx-auto flex">
          <button
            onClick={() => setActiveTab('generate')}
            className={`flex-1 py-3 px-4 flex flex-col items-center space-y-1 transition-colors ${
              activeTab === 'generate' 
                ? 'text-blue-600 bg-blue-50' 
                : 'text-gray-600 hover:text-blue-600'
            }`}
          >
            <Send className="h-5 w-5" />
            <span className="text-xs font-medium">投稿生成</span>
          </button>
          <button
            onClick={() => setActiveTab('settings')}
            className={`flex-1 py-3 px-4 flex flex-col items-center space-y-1 transition-colors ${
              activeTab === 'settings' 
                ? 'text-blue-600 bg-blue-50' 
                : 'text-gray-600 hover:text-blue-600'
            }`}
          >
            <Settings className="h-5 w-5" />
            <span className="text-xs font-medium">設定</span>
          </button>
        </div>
      </nav>
    </div>
  );
}

export default App;
